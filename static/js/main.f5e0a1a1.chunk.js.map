{"version":3,"sources":["component/Message.js","map-style.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","height","wrapper","width","spacing","paper","zIndex","position","margin","svg","polygon","fill","palette","common","white","stroke","divider","strokeWidth","Message","clusterLayer","id","type","source","filter","paint","clusterCountLayer","layout","unclusteredPointLayer","geolocateStyle","top","left","fullscreenControlStyle","padding","navStyle","scaleControlStyle","bottom","initialViewState","longitude","latitude","zoom","bearing","pitch","useStyles","list","flexGrow","menuButton","marginLeft","marginRight","totalDiv","fontSize_small","fontSize","App","useState","totalInfo","SettotalInfo","drawerState","SetdrawerState","Covid19Info","SetCovid19Info","viewport","setViewPort","toggleDrawer","side","open","classes","sideList","className","List","ListItem","button","ListItemText","primary","useEffect","fetch","then","res","json","result","console","log","error","_onViewportChange","_sourceRef","React","createRef","AppBar","color","Toolbar","IconButton","aria-label","onClick","Drawer","onClose","tabIndex","role","onKeyDown","dates","features","map","x","properties","確定日YYYYMMDD","maxDate","Math","max","apply","dateTime","Date","toLocaleDateString","length","_DispTotalInfo","style","textAlign","fontWeight","mapboxApiAccessToken","mapStyle","interactiveLayerIds","onViewportChange","event","feature","clusterId","cluster_id","current","getSource","getClusterExpansionZoom","err","geometry","coordinates","transitionDuration","e","message","data","cluster","clusterMaxZoom","clusterRadius","ref","positionOptions","enableHighAccuracy","trackUserLocation","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f5e0a1a1.chunk.js","sourcesContent":["import React  from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: 'auto',\r\n  },\r\n  wrapper: {\r\n    width: 300 + theme.spacing(2),\r\n  },\r\n  paper: {\r\n    zIndex: 1,\r\n    position: 'relative',\r\n    margin: theme.spacing(1),\r\n  },\r\n  svg: {\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n  polygon: {\r\n    fill: theme.palette.common.white,\r\n    stroke: theme.palette.divider,\r\n    strokeWidth: 1,\r\n  },\r\n}));\r\n\r\n//messageコンポーネント\r\nfunction Message(props){\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.wrapper}>\r\n                <Slide direction=\"up\" in={props.visible} mountOnEnter unmountOnExit>\r\n                    <Paper elevation={4} className={classes.paper}>\r\n                        {/* <svg className={classes.svg}>\r\n                        <polygon points=\"0,100 50,00, 100,100\" className={classes.polygon} />\r\n                        </svg> */}\r\n                        {props.name}\r\n                    </Paper>\r\n                </Slide>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = {\n  id: 'data',\n  type: 'fill',\n  paint: {\n    'fill-color': {\n      property: 'percentile',\n      stops: [\n        [0, '#3288bd'],\n        [1, '#66c2a5'],\n        [2, '#abdda4'],\n        [3, '#e6f598'],\n        [4, '#ffffbf'],\n        [5, '#fee08b'],\n        [6, '#fdae61'],\n        [7, '#f46d43'],\n        [8, '#d53e4f']\n      ]\n    },\n    'fill-opacity': 0.8\n  }\n};\n\nconst MAX_ZOOM_LEVEL = 18;\n\nexport const heatmapLayer = {\n  maxzoom: MAX_ZOOM_LEVEL,\n  type: 'heatmap',\n  paint: {\n    // Increase the heatmap weight based on frequency and property magnitude\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    // Increase the heatmap color weight weight by zoom level\n    // heatmap-intensity is a multiplier on top of heatmap-weight\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 5],\n    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n    // Begin color ramp at 0-stop with a 0-transparancy color\n    // to create a blur-like effect.\n    'heatmap-color': [\n      'interpolate',\n      ['linear'],\n      ['heatmap-density'],\n      0,\n      'rgba(33,102,172,0)',\n      0.2,\n      'rgb(103,169,207)',\n      0.4,\n      'rgb(209,229,240)',\n      0.6,\n      'rgb(253,219,199)',\n      0.8,\n      'rgb(239,138,98)',\n      0.9,\n      'rgb(255,201,101)'\n    ],\n    // Adjust the heatmap radius by zoom level\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, 20],\n    // Transition from heatmap to circle layer by zoom level\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n  }\n};\n\nexport const clusterLayer = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n    'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n  }\n};\n\nexport const clusterCountLayer = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  }\n};\n\nexport const unclusteredPointLayer = {\n  id: 'unclustered-point',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['!', ['has', 'point_count']],\n  paint: {\n    'circle-color': '#11b4da',\n    'circle-radius': 4,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#fff'\n  }\n};\n\n\n","import React, { useState, useEffect } from 'react';\nimport MapGL, {Popup, GeolocateControl, Source, Layer, NavigationControl, FullscreenControl, ScaleControl} from 'react-map-gl';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Drawer from '@material-ui/core/Drawer';\nimport Message from './component/Message';\nimport {clusterLayer, clusterCountLayer, unclusteredPointLayer} from './map-style.js';\n\n//MapBoxへのアクセストークン\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoieXVzdWtlZWVlZWU1NSIsImEiOiJjazhudGpiczgxMmN5M2dxb3FyMTBvZGUwIn0.4rGM-WGp5mEoCdGQDHEYLA';\n\nconst geolocateStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  margin: 10\n};\n\nconst fullscreenControlStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nconst navStyle = {\n  position: 'absolute',\n  top: 36,\n  left: 0,\n  padding: '10px'\n};\n\nconst scaleControlStyle = {\n  position: 'absolute',\n  bottom: 36,\n  left: 0,\n  padding: '10px'\n};\n\n// 地図上の初期表示位置を指定（初期位置は東京）\nconst initialViewState = {\n  width: \"100%\",\n  height: 900,\n  //経度\n  longitude: 139.7212733,\n  //緯度\n  latitude: 35.6606213,\n  //拡大\n  zoom: 7,\n  bearing: 0,\n  //地図の傾斜\n  pitch: 0\n};\n\n//style設定\nconst useStyles = makeStyles({\n  list:{\n    width:200,\n  },\n  root:{\n    flexGrow: 1,\n  },\n  menuButton:{\n    marginLeft: -12,\n    marginRight: 0,\n  },\n  totalDiv:{\n    marginLeft: 'auto',\n  },\n  fontSize_small:{\n    fontSize:\"12px\",\n  }\n});\n\nfunction App(){\n\n  const [totalInfo, SettotalInfo] = useState(null);\n  const [drawerState, SetdrawerState] = useState(false);\n  const [Covid19Info, SetCovid19Info] = useState(null);\n  const [viewport, setViewPort ] = useState(initialViewState)\n  const [popupInfo, SetpopupInfo] = useState(null);\n\n  const toggleDrawer = (side, open) =>()=>{\n    SetdrawerState(open);\n  };\n\n  const classes = useStyles();\n\n  //サイドバー表示用\n  const sideList=(\n    <div className={classes.list}>\n      <List>\n        <ListItem button>\n          <ListItemText primary=\"Home\"></ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemText primary=\"About\"></ListItemText>\n        </ListItem>\n      </List>\n    </div>\n  );\n\n  //コンポーネントがマウントされてから動作するメソッド\n  //APIにアクセスしデータを取得する\n  useEffect(() =>{\n    //COVID-19情報取得\n    //fetch(\"https://covid19-japan-web-api.now.sh/api/v1/prefectures\")\n    fetch(\"https://services6.arcgis.com/5jNaHNYe2AnnqRnS/arcgis/rest/services/COVID19_JapanCaseData/FeatureServer/0/query?where=%E9%80%9A%E3%81%97%3E-1&returnIdsOnly=false&returnCountOnly=false&&f=pgeojson&outFields=*&orderByFields=%E9%80%9A%E3%81%97\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(\"result\", result);\n          SetCovid19Info(result);\n\n          //国内総合情報を取得\n          GetTotalInfo();\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  },[]);\n\n  //国内総合情報を取得\n  function GetTotalInfo(){\n    fetch(\"https://covid19-japan-web-api.now.sh/api/v1/total\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          SettotalInfo(result);\n          console.log(\"TotalInfo result\", result);\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  //国内総合情報を表示\n  function _DispTotalInfo(){\n    if(totalInfo !== null){\n      let dates = Covid19Info.features.map(x => {\n        return x.properties.確定日YYYYMMDD;\n      });\n      //確定日配列から最大値を取得（UNIXタイムで取得）\n      let maxDate = Math.max.apply(null,dates);\n      let dateTime = new Date(maxDate).toLocaleDateString();\n      \n      return(\n        <div className={classes.fontSize_small}>\n          <div>最終更新日: {dateTime}</div>\n          <div>陽性患者数: {Covid19Info.features.length}人</div>\n        </div>\n      )\n    }\n  }\n\n  //日時変換\n  function DateConvert(date){\n    if(date !== null){\n      let val = String(date);\n      return val.substr(0,4) + '/' + val.substr(4,2) + '/' + val.substr(6,2);\n    }\n  }\n\n  //ピンクリックイベント\n  const _onClickMarker = city => {\n    SetpopupInfo(city);\n  };\n\n  //ポップアップ表示処理\n  function _renderPopup() {\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.geometry.coordinates[0]}\n          latitude={popupInfo.geometry.coordinates[1]}\n          closeOnClick={true}\n          onClose={() => SetpopupInfo(null)}\n        >\n          <div>\n            <p>id: {popupInfo.id}</p>\n            <p>性別: {popupInfo.properties.性別}</p>\n            <p>年齢: {popupInfo.properties.年代}</p>\n            <p>居住都道府県: {popupInfo.properties.居住都道府県}</p>\n            <p>受診都道府県: {popupInfo.properties.受診都道府県}</p>\n          </div>\n        </Popup>\n      )\n    );\n  }\n\n  const _onViewportChange = viewport => setViewPort({...viewport})\n\n  //locate meクリック時のイベント\n  const _onGeoLocateViewportChange = (viewport) => {\n    viewport.zoom = 18\n    setViewPort({...viewport})\n  }\n\n  var _sourceRef = React.createRef();\n\n  //clusterクリック処理\n  const _onClick = event => {\n    try{\n      const feature = event.features[0];\n      const clusterId = feature.properties.cluster_id;\n      console.log(\"clusterId\",clusterId)\n\n      const mapboxSource = _sourceRef.current.getSource();\n\n      mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n\n        _onViewportChange({\n          ...viewport,\n          longitude: feature.geometry.coordinates[0],\n          latitude: feature.geometry.coordinates[1],\n          zoom,\n          transitionDuration: 500\n        });\n      });\n    }\n    catch(e){\n      console.log(\"e = \",e.message);\n      return;\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\" color=\"inherit\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={toggleDrawer('left', true)}>\n            <MenuIcon></MenuIcon>\n          </IconButton>\n          <Drawer open={drawerState} onClose={toggleDrawer('left', false)}>\n            <div\n              tabIndex={0}\n              role=\"button\"\n              onClick={toggleDrawer('left', false)}\n              onKeyDown={toggleDrawer('left', false)}>\n              {sideList}\n            </div>\n          </Drawer>\n            COVID-19 Map\n          <div className={classes.totalDiv}>\n            {_DispTotalInfo()}\n          </div>\n        </Toolbar>\n      </AppBar>\n      <div style={{textAlign: 'center', fontSize: '25px', fontWeight: 'bolder' }}></div>\n      <MapGL\n        {...viewport}\n        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11?optimize = true\"\n        interactiveLayerIds={[clusterLayer.id]}\n        onViewportChange={_onViewportChange}\n        onClick={_onClick}\n      >\n        <Source \n          type=\"geojson\" \n          data={Covid19Info}\n          cluster={true}\n          clusterMaxZoom={18}\n          clusterRadius={50}\n          ref={_sourceRef}\n        >\n          <Layer {...clusterLayer} />\n          <Layer {...clusterCountLayer} />\n          <Layer {...unclusteredPointLayer} />\n        </Source>\n        <div style={fullscreenControlStyle}>\n          <FullscreenControl />\n        </div>\n        <div style={navStyle}>\n          <NavigationControl />\n        </div>\n        <div style={scaleControlStyle}>\n          <ScaleControl />\n        </div>\n\n        <GeolocateControl\n          onViewportChange={_onGeoLocateViewportChange}\n          style={geolocateStyle}\n          positionOptions={{enableHighAccuracy: true}}\n          trackUserLocation={true}\n        />\n      </MapGL>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}