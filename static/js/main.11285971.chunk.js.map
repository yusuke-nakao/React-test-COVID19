{"version":3,"sources":["pins.js","component/Message.js","App.js","serviceWorker.js","index.js"],"names":["Pins","lat1","lng1","lat2","lng2","Math","PI","acos","cos","sin","this","props","data","vp","onClick","features","filter","x","GetDistance","geometry","coordinates","latitude","longitude","map","city","index","key","height","viewBox","style","cursor","fill","stroke","transform","d","PureComponent","makeStyles","theme","root","wrapper","width","spacing","paper","zIndex","position","margin","svg","polygon","palette","common","white","divider","strokeWidth","Message","geolocateStyle","top","left","initialViewState","zoom","pitch","useStyles","list","flexGrow","menuButton","marginLeft","marginRight","totalDiv","fontSize_small","fontSize","App","useState","totalInfo","SettotalInfo","drawerState","SetdrawerState","Covid19Info","SetCovid19Info","viewport","setViewPort","popupInfo","SetpopupInfo","toggleDrawer","side","open","classes","sideList","className","List","ListItem","button","ListItemText","primary","useEffect","fetch","then","res","json","result","console","log","error","AppBar","color","Toolbar","IconButton","aria-label","Drawer","onClose","tabIndex","role","onKeyDown","date","val","String","substr","DateConvert","positive","_DispTotalInfo","textAlign","fontWeight","mapboxApiAccessToken","mapStyle","onViewportChange","tipSize","anchor","closeOnClick","id","properties","性別","年代","居住都道府県","受診都道府県","positionOptions","enableHighAccuracy","trackUserLocation","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11285971.chunk.js","sourcesContent":["import * as React from 'react';\nimport {PureComponent} from 'react';\nimport {Marker} from 'react-map-gl';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 20;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends PureComponent {\n\n  //２点の緯度経度から距離を算出\n  GetDistance(lat1, lng1, lat2, lng2) {\n    lat1 *= Math.PI / 180;\n    lng1 *= Math.PI / 180;\n    lat2 *= Math.PI / 180;\n    lng2 *= Math.PI / 180;\n\n    let ret = 6371 * Math.acos(Math.cos(lat1) * Math.cos(lat2) * Math.cos(lng2 - lng1) + Math.sin(lat1) * Math.sin(lat2));\n    return ret;\n  }\n  \n  render() {\n    const {data, vp, onClick} = this.props;\n\n    if(data === null)\n      return null;\n\n    //表示中の地点（緯度経度）から半径30km以内のデータをピックアップ\n    let datas = data.features.filter(x => this.GetDistance(x.geometry.coordinates[1], x.geometry.coordinates[0], vp.latitude, vp.longitude) <= 30);\n    //return data.map((city, index) => (\n      //<Marker key={`marker-${index}`} longitude={city.lng} latitude={city.lat}></Marker>\n    return datas.map((city, index) => (\n      <Marker key={`marker-${index}`} longitude={city.geometry.coordinates[0]} latitude={city.geometry.coordinates[1]}>\n        <svg\n          height={SIZE}\n          viewBox=\"0 0 24 24\"\n          style={{\n            cursor: 'pointer',\n            fill: '#d00',\n            stroke: 'none',\n            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n          }}\n          onClick={() => onClick(city)}\n        >\n          <path d={ICON} />\n        </svg>\n      </Marker>\n    ));\n  }\n}\n","import React  from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: 'auto',\r\n  },\r\n  wrapper: {\r\n    width: 300 + theme.spacing(2),\r\n  },\r\n  paper: {\r\n    zIndex: 1,\r\n    position: 'relative',\r\n    margin: theme.spacing(1),\r\n  },\r\n  svg: {\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n  polygon: {\r\n    fill: theme.palette.common.white,\r\n    stroke: theme.palette.divider,\r\n    strokeWidth: 1,\r\n  },\r\n}));\r\n\r\n//messageコンポーネント\r\nfunction Message(props){\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.wrapper}>\r\n                <Slide direction=\"up\" in={props.visible} mountOnEnter unmountOnExit>\r\n                    <Paper elevation={4} className={classes.paper}>\r\n                        {/* <svg className={classes.svg}>\r\n                        <polygon points=\"0,100 50,00, 100,100\" className={classes.polygon} />\r\n                        </svg> */}\r\n                        {props.name}\r\n                    </Paper>\r\n                </Slide>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, { useState, useEffect } from 'react';\nimport MapGL, {Popup, GeolocateControl} from 'react-map-gl';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Drawer from '@material-ui/core/Drawer';\nimport Pins from './pins';\nimport Message from './component/Message';\n\n//MapBoxへのアクセストークン\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoieXVzdWtlZWVlZWU1NSIsImEiOiJjazhudGpiczgxMmN5M2dxb3FyMTBvZGUwIn0.4rGM-WGp5mEoCdGQDHEYLA';\n\nconst geolocateStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  margin: 10\n};\n\n// 地図上の初期表示位置を指定（初期位置は東京）\nconst initialViewState = {\n  width: \"100%\",\n  height: 900,\n  //経度\n  longitude: 139.7212733,\n  //緯度\n  latitude: 35.6606213,\n  //拡大\n  zoom: 9,\n  //地図の傾斜\n  pitch: 45\n};\n\n//style設定\nconst useStyles = makeStyles({\n  list:{\n    width:200,\n  },\n  root:{\n    flexGrow: 1,\n  },\n  menuButton:{\n    marginLeft: -12,\n    marginRight: 0,\n  },\n  totalDiv:{\n    marginLeft: 'auto',\n  },\n  fontSize_small:{\n    fontSize:\"12px\",\n  }\n});\n\nfunction App(){\n\n  const [totalInfo, SettotalInfo] = useState(null);\n  const [drawerState, SetdrawerState] = useState(false);\n  const [Covid19Info, SetCovid19Info] = useState(null);\n  const [viewport, setViewPort ] = useState(initialViewState)\n  const [popupInfo, SetpopupInfo] = useState(null);\n\n  const toggleDrawer = (side, open) =>()=>{\n    SetdrawerState(open);\n  };\n\n  const classes = useStyles();\n\n  //サイドバー表示用\n  const sideList=(\n    <div className={classes.list}>\n      <List>\n        <ListItem button>\n          <ListItemText primary=\"Home\"></ListItemText>\n        </ListItem>\n        <ListItem button>\n          <ListItemText primary=\"About\"></ListItemText>\n        </ListItem>\n      </List>\n    </div>\n  );\n\n  //コンポーネントがマウントされてから動作するメソッド\n  //APIにアクセスしデータを取得する\n  useEffect(() =>{\n    //COVID-19情報取得\n    //fetch(\"https://covid19-japan-web-api.now.sh/api/v1/prefectures\")\n    fetch(\"https://services6.arcgis.com/5jNaHNYe2AnnqRnS/arcgis/rest/services/COVID19_JapanData/FeatureServer/0/query?where=%E9%80%9A%E3%81%97%3E0&returnIdsOnly=false&returnCountOnly=false&&f=pgeojson&outFields=*&orderByFields=%E9%80%9A%E3%81%97\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(\"result\", result);\n          SetCovid19Info(result);\n\n          //国内総合情報を取得\n          GetTotalInfo();\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  },[]);\n\n  //国内総合情報を取得\n  function GetTotalInfo(){\n    fetch(\"https://covid19-japan-web-api.now.sh/api/v1/total\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          SettotalInfo(result);\n          console.log(\"TotalInfo result\", result);\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  //国内総合情報を表示\n  function _DispTotalInfo(){\n    if(totalInfo !== null){\n      return(\n        <div className={classes.fontSize_small}>\n          <div>最終更新日: {DateConvert(totalInfo.date)}</div>\n          <div>陽性患者数: {totalInfo.positive}人</div>\n        </div>\n      )\n    }\n  }\n\n  //日時変換\n  function DateConvert(date){\n    if(date !== null){\n      let val = String(date);\n      return val.substr(0,4) + '/' + val.substr(4,2) + '/' + val.substr(6,2);\n    }\n  }\n\n  //ピンクリックイベント\n  const _onClickMarker = city => {\n    SetpopupInfo(city);\n  };\n\n  //ポップアップ表示処理\n  function _renderPopup() {\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          /* longitude={popupInfo.lng}\n          latitude={popupInfo.lat} */\n          longitude={popupInfo.geometry.coordinates[0]}\n          latitude={popupInfo.geometry.coordinates[1]}\n          closeOnClick={true}\n          onClose={() => SetpopupInfo(null)}\n        >\n          <div>\n            {/* <p>id: {popupInfo.id}</p>\n            <p>場所: {popupInfo.name}</p>\n            <p>感染数: {popupInfo.cases}人</p>\n            <p>死者数: {popupInfo.deaths}人</p> */}\n            <p>id: {popupInfo.id}</p>\n            <p>性別: {popupInfo.properties.性別}</p>\n            <p>年齢: {popupInfo.properties.年代}</p>\n            <p>居住都道府県: {popupInfo.properties.居住都道府県}</p>\n            <p>受診都道府県: {popupInfo.properties.受診都道府県}</p>\n          </div>\n        </Popup>\n      )\n    );\n  }\n\n  const _onViewportChange = viewport => setViewPort({...viewport})\n\n  //locate meクリック時のイベント\n  const _onGeoLocateViewportChange = (viewport) => {\n    viewport.zoom = 18\n    setViewPort({...viewport})\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\" color=\"inherit\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={toggleDrawer('left', true)}>\n            <MenuIcon></MenuIcon>\n          </IconButton>\n          <Drawer open={drawerState} onClose={toggleDrawer('left', false)}>\n            <div\n              tabIndex={0}\n              role=\"button\"\n              onClick={toggleDrawer('left', false)}\n              onKeyDown={toggleDrawer('left', false)}>\n              {sideList}\n            </div>\n          </Drawer>\n            COVID-19 Map\n          <div className={classes.totalDiv}>\n            {_DispTotalInfo()}\n          </div>\n        </Toolbar>\n      </AppBar>\n      <div style={{textAlign: 'center', fontSize: '25px', fontWeight: 'bolder' }}></div>\n      <MapGL\n        {...viewport}\n        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={_onViewportChange}\n      >\n        <Pins data={Covid19Info} vp={viewport} onClick={_onClickMarker}/>\n        {_renderPopup()}\n\n        <GeolocateControl\n          onViewportChange={_onGeoLocateViewportChange}\n          style={geolocateStyle}\n          positionOptions={{enableHighAccuracy: true}}\n          trackUserLocation={true}\n        />\n      </MapGL>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}