{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialViewState","longitude","latitude","zoom","pitch","bearing","App","props","toggleDrawer","side","open","setState","state","geojsonPoint","totalInfo","left","fetch","then","res","json","result","makeGeoJson","console","log","GetTotalInfo","error","data","retJson","type","features","forEach","el","val","id","geometry","coordinates","lng","lat","properties","name","name_ja","cases","deaths","push","hoveredObject","this","undefined","DateConvert","date","positive","String","substr","classes","sideList","className","list","List","ListItem","button","ListItemText","primary","totalinfo","layers","GeoJsonLayer","getRadius","d","getFillColor","pickable","onHover","info","object","controller","root","AppBar","position","color","Toolbar","IconButton","menuButton","aria-label","onClick","Drawer","onClose","tabIndex","role","onKeyDown","totalDiv","_DispTotalInfo","mapStyle","mapboxApiAccessToken","_renderTooltip","React","Component","withStyles","width","flexGrow","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"ycAsBMA,EAAmB,CACvBC,UAAW,YACXC,SAAU,WACVC,KAAM,EACNC,MAAO,GACPC,QAAS,GAoBLC,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,aAAe,SAACC,EAAMC,GAAP,OAAe,WAC5B,EAAKC,SAAL,eACGF,EAAOC,MATV,EAAKE,MAAQ,CACXC,aAAa,KACbC,UAAU,KACVC,MAAM,GALQ,E,gEAiBE,IAAD,OACjBC,MAAM,2DACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKT,SAAS,CACZE,aAAc,EAAKQ,YAAYD,KAEjCE,QAAQC,IAAI,SAAUH,GAEtB,EAAKI,kBAEP,SAACC,GACCH,QAAQC,IAAIE,Q,kCAKRC,GACV,IAAIC,EAAU,CACZC,KAAK,oBACLC,SAAU,IA0BZ,OAvBAH,EAAKI,SAAQ,SAAAC,GACX,IAAIC,EAAM,CACRC,GAAIF,EAAGE,GACPL,KAAM,UACNM,SAAS,CACPN,KAAM,QACNO,YAAa,CACXJ,EAAGK,IAAKL,EAAGM,MAGfC,WAAW,CACTL,GAAIF,EAAGE,GACPM,KAAMR,EAAGS,QACTH,IAAKN,EAAGM,IACRD,IAAKL,EAAGK,IACRK,MAAOV,EAAGU,MACVC,OAAQX,EAAGW,SAGff,EAAQE,SAASc,KAAKX,MAGxBV,QAAQC,IAAI,UAAWI,GAChBA,I,uCAIQ,IACRiB,GAAiBC,KAAKjC,OAAS,IAA/BgC,cAGP,GAFAtB,QAAQC,IAAI,gBAAiBqB,QAERE,IAAlBF,EACD,OACE,kBAAC,IAAD,CACE3C,UAAW2C,EAAcV,SAASC,YAAY,GAC9CjC,SAAU0C,EAAcV,SAASC,YAAY,IAC7C,6BACE,kCAAQS,EAAcN,WAAWL,IACjC,4CAAQW,EAAcN,WAAWC,MACjC,kDAASK,EAAcN,WAAWG,MAAlC,UACA,kDAASG,EAAcN,WAAWI,OAAlC,c,qCAQK,IAAD,OACZ1B,MAAM,qDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKT,SAAS,CACZG,UAAWM,IAEbE,QAAQC,IAAI,mBAAoBH,MAElC,SAACK,GACCH,QAAQC,IAAIE,Q,uCAQlB,GADAoB,KAAKE,cACuB,OAAzBF,KAAKjC,MAAME,UACZ,OACE,6BACE,8DAAW+B,KAAKE,YAAYF,KAAKjC,MAAME,UAAUkC,OACjD,8DAAWH,KAAKjC,MAAME,UAAUmC,SAAhC,a,kCAUID,GACV,GAAY,OAATA,EAAc,CACf,IAAIhB,EAAMkB,OAAOF,GACjB,OAAOhB,EAAImB,OAAO,EAAE,GAAK,IAAMnB,EAAImB,OAAO,EAAE,GAAK,IAAMnB,EAAImB,OAAO,EAAE,M,+BAK/D,IAAD,OACEC,EAAYP,KAAKtC,MAAjB6C,QAGFC,EACJ,yBAAKC,UAAWF,EAAQG,MACtB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,UAExB,kBAACH,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,CAAcC,QAAQ,aAOxBC,EAAYhB,KAAKjC,MAAME,UACvBD,EAAegC,KAAKjC,MAAMC,aAChCS,QAAQC,IAAI,iBAAiBV,GAC7BS,QAAQC,IAAI,mBAAmBsC,GAC/B,IAAMC,EAAS,CACb,IAAIC,IAAa,CAEf9B,GAAI,cAEJP,KAAMb,EAENmD,UAAW,SAAAC,GAAC,OAAI,KAGhBC,aAAc,SAAAD,GAAC,MAAI,CAAC,IAAI,GAAG,GAAG,MAC9BE,UAAU,EAGVC,QAAS,SAAAC,GAAI,OAAI,EAAK1D,SAAS,CAC7BiC,cAAeyB,EAAKC,aAK1B,OACE,oCACA,kBAAC,IAAD,CACEtE,iBAAkBA,EAClBuE,YAAY,EACZT,OAAQA,GAER,yBAAKR,UAAWF,EAAQoB,MACtB,kBAACC,EAAA,EAAD,CAAQC,SAAS,WAAWC,MAAM,WAChC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYvB,UAAWF,EAAQ0B,WAAYH,MAAM,UAAUI,aAAW,OAAOC,QAASnC,KAAKrC,aAAa,QAAQ,IAC9G,kBAAC,IAAD,OAEF,kBAACyE,EAAA,EAAD,CAAQvE,KAAMmC,KAAKjC,MAAMG,KAAMmE,QAASrC,KAAKrC,aAAa,QAAQ,IAChE,yBACE2E,SAAU,EACVC,KAAK,SACLJ,QAASnC,KAAKrC,aAAa,QAAQ,GACnC6E,UAAWxC,KAAKrC,aAAa,QAAQ,IACpC6C,IAVP,iBAcE,yBAAKC,UAAWF,EAAQkC,UACrBzC,KAAK0C,qBAMd,kBAAC,IAAD,CACEC,SAAS,qCACTC,qBA1OkB,qGA2OjB5C,KAAK6C,wB,GA/MEC,IAAMC,WA4NTC,cA5OA,CACbtC,KAAK,CACHuC,MAAM,KAERtB,KAAK,CACHuB,SAAU,GAEZjB,WAAW,CACTkB,YAAa,GACbC,YAAa,IAEfX,SAAS,CACPU,WAAY,SAgODH,CAAmBvF,GC/Pd4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7F,MAAK,SAAA8F,GACJA,EAAaC,gBAEdC,OAAM,SAAAxF,GACLH,QAAQG,MAAMA,EAAMyF,c","file":"static/js/main.bbc49cc3.chunk.js","sourcesContent":["import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {StaticMap, Popup} from 'react-map-gl';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Drawer from '@material-ui/core/Drawer';\n\n//MapBoxへのアクセストークン\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoieXVzdWtlZWVlZWU1NSIsImEiOiJjazhudGpiczgxMmN5M2dxb3FyMTBvZGUwIn0.4rGM-WGp5mEoCdGQDHEYLA';\n\n// 地図上の初期表示位置を指定\nconst initialViewState = {\n  longitude: 139.7212733,\n  latitude: 35.6606213,\n  zoom: 8,\n  pitch: 45,\n  bearing: 0\n};\n\n//style設定\nconst styles = {\n  list:{\n    width:250,\n  },\n  root:{\n    flexGrow: 1,\n  },\n  menuButton:{\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  totalDiv:{\n    marginLeft: 'auto',\n  }\n};\n\nclass App extends React.Component{\n  //コンストラクター\n  constructor(props){\n    super(props);\n    this.state = {\n      geojsonPoint:null,\n      totalInfo:null,\n      left: false,\n    };\n  }\n\n  toggleDrawer = (side, open) =>()=>{\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  //コンポーネントがマウントされてから動作するメソッド\n  //APIにアクセスしデータを取得する\n  componentDidMount(){\n    fetch(\"https://covid19-japan-web-api.now.sh/api/v1/prefectures\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            geojsonPoint: this.makeGeoJson(result)\n          });\n          console.log(\"result\", result);\n          //国内総合情報を取得\n          this.GetTotalInfo();\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  makeGeoJson(data){\n    let retJson = {\n      type:\"FeatureCollection\",\n      features: []\n    };\n    \n    data.forEach(el => {\n      let val = {\n        id: el.id,\n        type: \"Feature\",\n        geometry:{\n          type: \"Point\",\n          coordinates: [\n            el.lng, el.lat\n          ] \n        },\n        properties:{\n          id: el.id,\n          name: el.name_ja,\n          lat: el.lat,\n          lng: el.lng,\n          cases: el.cases,\n          deaths: el.deaths\n        }\n      }\n      retJson.features.push(val);\n    });\n\n    console.log(\"retJson\", retJson);\n    return retJson;\n  }\n\n  //ポップアップ表示メソッド\n  _renderTooltip(){\n    const {hoveredObject} = this.state || {};\n    console.log(\"hoveredObject\", hoveredObject);\n\n    if(hoveredObject !== undefined){\n      return(\n        <Popup\n          longitude={hoveredObject.geometry.coordinates[0]}\n          latitude={hoveredObject.geometry.coordinates[1]}>\n          <div>\n            <p>id: {hoveredObject.properties.id}</p>\n            <p>場所: {hoveredObject.properties.name}</p>\n            <p>感染数: {hoveredObject.properties.cases}人</p>\n            <p>死者数: {hoveredObject.properties.deaths}人</p>\n          </div>\n        </Popup>\n      )\n    }\n  }\n\n  //国内総合情報を取得\n  GetTotalInfo(){\n    fetch(\"https://covid19-japan-web-api.now.sh/api/v1/total\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            totalInfo: result\n          });\n          console.log(\"TotalInfo result\", result);\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  //国内総合情報を表示\n  _DispTotalInfo(){\n    this.DateConvert();\n    if(this.state.totalInfo !== null){\n      return(\n        <div>\n          <p>最終更新日: {this.DateConvert(this.state.totalInfo.date)}</p>\n          <p>陽性患者数: {this.state.totalInfo.positive}人</p>\n          {/* <p>-症状あり: {this.state.totalInfo.symptom}人</p>\n          <p>-症状なし: {this.state.totalInfo.symptomless}人</p>\n          <p>-症状確認中: {this.state.totalInfo.symptomConfirming}人</p> */}\n        </div>\n      )\n    }\n  }\n\n  //日時変換\n  DateConvert(date){\n    if(date !== null){\n      let val = String(date);\n      return val.substr(0,4) + '/' + val.substr(4,2) + '/' + val.substr(6,2);\n    }\n  }\n\n  //レンダリング用メソッド\n  render(){\n    const { classes } = this.props;\n\n    //サイドバー表示用\n    const sideList=(\n      <div className={classes.list}>\n        <List>\n          <ListItem button>\n            <ListItemText primary=\"Home\"></ListItemText>\n          </ListItem>\n          <ListItem button>\n            <ListItemText primary=\"About\"></ListItemText>\n          </ListItem>\n        </List>\n      </div>\n    );\n\n    //コンストラクターで取得したGeoJsonをセット\n    const totalinfo = this.state.totalInfo;\n    const geojsonPoint = this.state.geojsonPoint;\n    console.log(\"geojsonPoint: \",geojsonPoint);\n    console.log(\"totalInfoaaaaaaa\",totalinfo);\n    const layers = [\n      new GeoJsonLayer({\n        //任意のid\n        id: 'Point_layer',\n        //GeoJsonを指定\n        data: geojsonPoint,\n        //pointの半径\n        getRadius: d => 4000,\n        //地物のカラーをRGBaで指定\n        //aは透過度で0～255から指定\n        getFillColor: d => [245,36,36,150],\n        pickable: true,\n        //地物にホバーした時に発生するイベント\n        //stateを更新する\n        onHover: info => this.setState({\n          hoveredObject: info.object,\n        })\n      }),\n    ];\n\n    return(\n      <>\n      <DeckGL\n        initialViewState={initialViewState}\n        controller={true}\n        layers={layers}\n      >\n        <div className={classes.root}>\n          <AppBar position=\"relative\" color=\"inherit\">\n            <Toolbar>\n              <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleDrawer('left', true)}>\n                <MenuIcon></MenuIcon>\n              </IconButton>\n              <Drawer open={this.state.left} onClose={this.toggleDrawer('left', false)}>\n                <div\n                  tabIndex={0}\n                  role=\"button\"\n                  onClick={this.toggleDrawer('left', false)}\n                  onKeyDown={this.toggleDrawer('left', false)}>\n                  {sideList}\n                </div>\n              </Drawer>\n                COVID-19 Japan\n              <div className={classes.totalDiv}>\n                {this._DispTotalInfo()}\n              </div>\n            </Toolbar>\n\n          </AppBar>\n        </div>\n        <StaticMap\n          mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n          mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}>\n          {this._renderTooltip()}\n        </StaticMap>\n      </DeckGL>\n      </>\n    );\n  }\n\n}\n\nApp.propTypes={\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}